"use client";
import "./globals.css";
import Header from "@/components/headers/Header";
import { ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { Provider } from "react-redux";
import store from "@/redux/store/store";
import AuthProvider from "@/components/authProvider/AuthProvider";
import MolaPopup from "@/components/popups/MolaPopup";
import { useSelector } from "react-redux";
import FoodPopup from "@/components/popups/FoodPopup";
import StopJobPopup from "@/components/popups/StopJobPopup";
import CancelJobPopup from "@/components/popups/CancelJobPopup";
import RepairJobPopup from "@/components/popups/RepairJobPopup";
import FinishedWorkPopup from "@/components/popups/kalite/FinishedWorkPopup";
import { usePathname } from "next/navigation";
import MainHeader from "@/components/headers/MainHeader";
import { useEffect } from "react";

// export const metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

// Layout komponenti, sayfanın genel yapısını ve pop-up bileşenlerini yönetir
function Layout({ children }) {
  const pathName = usePathname();
  const project = pathName.split("/")[1];
  const section = pathName.split("/")[2];
  const area_name = pathName.split("/")[3];
  const foodPopupState = useSelector((state) => state.global.foodPopupState);
  const isMolaPopup = useSelector((state) => state.global.isMolaPopup);
  const { stopReasonPopup, cancelReasonPopup, repairJobPopup, finishedWorkPopup } = useSelector((state) => state.order)


  // useEffect(() => {
  //   // 5 dakikada bir sayfayı yenile
  //   const intervalId = setInterval(() => {
  //     window.location.assign(`http://192.168.3.7:3000/uretim/${section}/${area_name}`);
  //   }, 300000); // 5 dakika = 300000 milisaniye

  //   // Cleanup function to clear the interval
  //   return () => clearInterval(intervalId);
  // }, [section, area_name]); // section ve area_name değiştiğinde interval yeniden oluşturulacak

  return (
    <>
      {project === "uretim" && <Header />}
      {project === "home" && <MainHeader />}
      <main className="relative">{children}</main>
      {isMolaPopup && <MolaPopup />}
      {foodPopupState && <FoodPopup />}
      {stopReasonPopup && <StopJobPopup />}
      {cancelReasonPopup && <CancelJobPopup />}
      {repairJobPopup && <RepairJobPopup />}
      {finishedWorkPopup && <FinishedWorkPopup />}
      <ToastContainer />
    </>
  );
}

// RootLayout, uygulamanın temel yapısını ve Redux sağlayıcısını yönetir
export default function RootLayout({ children }) {
  return (
    <html lang="tr">
      <body>
        <Provider store={store}>
          <AuthProvider>
            <Layout>{children}</Layout>
          </AuthProvider>
        </Provider>
      </body>
    </html>
  );
}
