const express = require("express");
const app = express();
const port = process.env.PORT || 3003;
const cors = require("cors");
const http = require("http"); // HTTP sunucu oluÅŸturacaÄŸÄ±z
const socketIo = require("socket.io"); // Socket.io entegrasyonu
const cookieParser = require("cookie-parser");
const sequelize = require("../lib/dbConnect");
const { syncModels } = require("../models/syncDBmodels");
const leaveRoutes = require("../api/routers/leaveRoutes");
const userRoutes = require("../api/routers/userRoutes");
const orderRoutes = require("../api/routers/orderRoutes");
const shiftRoutes = require("../api/routers/shiftRoutes");
const leaveServices = require("../api/services/leaveServices");

app.use(express.json());
app.use(cookieParser());

const corsOptions = {
  origin: [
    "http://localhost:3000",
    "http://192.168.3.5:3000",
    "http://192.168.3.7:3000",
    "http://localhost:3002",
    "http://192.168.0.76:3000",
    "http://192.168.1.246:3000",
  ], // Burada uygun origin'i belirleyin
  credentials: true, // Credentials (cookies, authorization headers vs.) ile isteklere izin ver
  methods: ["GET", "POST", "PUT", "DELETE"], // Ä°zin verilen HTTP metodlarÄ±
};

app.use(cors(corsOptions));


// **HTTP Sunucusu ve Socket.io BaÅŸlatma**
//* âœ… Burada HTTP sunucusunu (http.createServer(app)) manuel olarak oluÅŸturduk ve Express uygulamasÄ±nÄ± bu sunucunun iÃ§ine verdik.
//* âœ… Bunun amacÄ±, WebSocket (socket.io gibi) veya diÄŸer HTTP tabanlÄ± protokolleri kullanmak iÃ§in HTTP sunucusunu doÄŸrudan kontrol edebilmektir.
//* âœ… Express burada yine Ã§alÄ±ÅŸÄ±yor, ancak artÄ±k varsayÄ±lan olarak kendi HTTP sunucusunu baÅŸlatmÄ±yor.
const server = http.createServer(app); // HTTP sunucu oluÅŸtur

//*ğŸ”¹ socketIo(server) ile WebSocket sunucusunu baÅŸlatÄ±yoruz ve bunu HTTP sunucumuza (server) baÄŸlÄ±yoruz.
const io = socketIo(server, {
  cors: {
    origin: corsOptions.origin,
    credentials: true,
  },
});

// **Socket.io BaÄŸlantÄ± Dinleyicisi**
io.on("connection", (socket) => {
  console.log("Yeni bir kullanÄ±cÄ± baÄŸlandÄ±:", socket.id);

  // KullanÄ±cÄ± izinleri gÃ¼ncelleme isteÄŸi dinleniyor
  socket.on("refreshLeaves", () => {
    console.log("Ä°zin tablosunun gÃ¼ncellenmesi istendi.");
    io.emit("updateLeaveTable"); // TÃ¼m istemcilere izin tablosunun gÃ¼ncellenmesi gerektiÄŸini bildir
  });

  // KullanÄ±cÄ± ayrÄ±ldÄ±ÄŸÄ±nda
  socket.on("disconnect", () => {
    console.log("KullanÄ±cÄ± baÄŸlantÄ±yÄ± kesti:", socket.id);
  });
});

//! Sequelize ORM kullanarak bir Microsoft SQL Server veritabanÄ±na baÄŸlanma, baÄŸlantÄ±yÄ± doÄŸrulama ve veritabanÄ± modellerini senkronize etme iÅŸlemlerini gerÃ§ekleÅŸtirir.
sequelize
  .authenticate() // veri tabanÄ±na baglantÄ±nÄ±n basrÄ±lÄ± olup olmadÄ±gÄ±Ä± kontrol edÄ±lÄ±r basarÄ±lÄ± Ä±se Ä±sleme devam...
  .then(() => {
    console.log("MsSql veritabanÄ±na baÄŸlantÄ± baÅŸarÄ±lÄ±.");
    return syncModels(); // model db senkronizasyonu
  })
  .then(() => {
    console.log("Veritabani ve tablolar senkronize edildi.");
    server.listen(port, () => {
      console.log(`Server is running on http://localhost:${port}`);
      leaveServices.setSocket(io);
    });
  })
  .catch((err) => {
    console.error("MySQL veritabanÄ±na baÄŸlantÄ± baÅŸarÄ±sÄ±z:", err);
  });

//? SÃ¼reÃ§ler ile ilgili servisler aÅŸaÄŸÄ±da......................................................................
app.use("/api/leave", leaveRoutes);

//? KullanÄ±cÄ±lar ile ilgili servisler
app.use("/api/user", userRoutes);

//? Order Ä±slemlerÄ± Ä±le Ä±lgÄ±lÄ± rotalar (sipariÅŸ olustur iptal gÃ¼ncelle vs. bÃ¼tÃ¼n iÅŸ birimlerinin servislerini iÃ§erebilir.)
app.use("/api/order", orderRoutes);

app.use("/api/shift", shiftRoutes);

module.exports = { io };
